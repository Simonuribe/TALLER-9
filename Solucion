from typing import Tuple

class DatosMeteorologicos:
    def __init__(self, nombre_archivo: str):
        self.nombre_archivo = nombre_archivo

    def procesar_datos(self) -> Tuple[float, float, float, float, str]:
        temperatura_total = 0
        humedad_total = 0
        presion_total = 0
        velocidad_viento_total = 0
        direccion_viento = {'N': 0, 'NNE': 0, 'NE': 0, 'ENE': 0, 'E': 0, 'ESE': 0, 'SE': 0, 'SSE': 0, 'S': 0, 'SSW': 0, 'SW': 0, 'WSW': 0, 'W': 0, 'WNW': 0, 'NW': 0, 'NNW': 0}

        with open(self.nombre_archivo, 'r') as archivo:
            linea = archivo.readline()
            while linea:
                if linea.startswith("Temperatura:"):
                    temperatura = float(linea.split(":")[1])
                    temperatura_total += temperatura
                elif linea.startswith("Humedad:"):
                    humedad = float(linea.split(":")[1])
                    humedad_total += humedad
                elif linea.startswith("Presion:"):
                    presion = float(linea.split(":")[1])
                    presion_total += presion
                elif linea.startswith("Viento:"):
                    viento_info = linea.split(":")[1].split(',')
                    velocidad_viento = float(viento_info[0])
                    direccion_abreviada = viento_info[1].strip()
                    velocidad_viento_total += velocidad_viento
                    if direccion_abreviada in direccion_viento:
                        direccion_viento[direccion_abreviada] += 1
                linea = archivo.readline()

        total_registros = sum(direccion_viento.values())
        temperatura_promedio = temperatura_total / total_registros
        humedad_promedio = humedad_total / total_registros
        presion_promedio = presion_total / total_registros
        velocidad_viento_promedio = velocidad_viento_total / total_registros

        
        grados_totales = 0
        for direccion, cantidad in direccion_viento.items():
            grados_totales += cantidad * abreviaciones_a_grados[direccion]
        promedio_grados = grados_totales / total_registros
        definicion_direccion = min(abreviaciones_a_grados, key=lambda x: abs(abreviaciones_a_grados[x] - promedio_grados))

        return (temperatura_promedio, humedad_promedio, presion_promedio, velocidad_viento_promedio, definicion_direccion)

abreviaciones_a_grados = {
    "N": 0,
    "NNE": 22.5,
    "NE": 45,
    "ENE": 67.5,
    "E": 90,
    "ESE": 112.5,
    "SE": 135,
    "SSE": 157.5,
    "S": 180,
    "SSW": 202.5,
    "SW": 225,
    "WSW": 247.5,
    "W": 270,
    "WNW": 292.5,
    "NW": 315,
    "NNW": 337.5
}


datos = DatosMeteorologicos("datos.txt") 
resultados = datos.procesar_datos()


print("Temperatura promedio:", resultados[0])
print("Humedad promedio:", resultados[1])
print("Presión promedio:", resultados[2])
print("Velocidad promedio del viento:", resultados[3])
print("Dirección predominante del viento:", resultados[4])
